package dbtype

import (
	"encoding/json"
	"time"
)

// Code generated by dbtypegen, DO NOT EDIT.

// User is the type that represents table `user`.
type User struct {
	Id        int64     `db:"id"`
	CreatedAt time.Time `db:"created_at"`
	Active    bool      `db:"active"`
	Name      string    `db:"name"`
}

// Columns returns all columns as joined string
func (t *User) Columns() string {
	return "id,created_at,active,name"
}

// ColumnList returns all columns as slice of string.
func (t *User) ColumnList() []string {
	return []string{"id", "created_at", "active", "name"}
}

// TableName returns the name of table.
func (t *User) TableName() string {
	return "user"
}

// SelectAll returns a part of query like `SELECT id,name FROM people`.
func (t *User) SelectAll() string {
	return "SELECT id,created_at,active,name FROM user"
}

// Scans returns field's pointers for row.Scan.
func (t *User) Scans() []interface{} {
	return []interface{}{&t.Id, &t.CreatedAt, &t.Active, &t.Name}
}

// Group is the type that represents table `group`.
type Group struct {
	Id      string          `db:"id"`
	Image   []byte          `db:"image"`
	Options json.RawMessage `db:"options"`
}

// Columns returns all columns as joined string
func (t *Group) Columns() string {
	return "id,image,options"
}

// ColumnList returns all columns as slice of string.
func (t *Group) ColumnList() []string {
	return []string{"id", "image", "options"}
}

// TableName returns the name of table.
func (t *Group) TableName() string {
	return "group"
}

// SelectAll returns a part of query like `SELECT id,name FROM people`.
func (t *Group) SelectAll() string {
	return "SELECT id,image,options FROM group"
}

// Scans returns field's pointers for row.Scan.
func (t *Group) Scans() []interface{} {
	return []interface{}{&t.Id, &t.Image, &t.Options}
}
